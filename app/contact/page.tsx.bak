"use client";

import { Suspense } from "react";
import dynamic from "next/dynamic";
import { motion } from "framer-motion";nt";

import { useState, useRef, useEffect, Suspense } from "react";
import Link from "next/link";
import { motion, useInView } from "framer-motion";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useSearchParams } from "next/navigation";
import {
  Mail,
  Phone,
  Send,
  Linkedin,
  X,
  Instagram,
  Facebook,
  ArrowLeft,
  MapPin
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";

const projectTypes = [
  { value: 'web-development', label: 'Web Development' },
  { value: 'mobile-app', label: 'Mobile App Development' },
  { value: 'ui-ux', label: 'UI/UX Design' },
  { value: 'data-analytics', label: 'Data Analytics' },
  { value: 'machine-learning', label: 'Machine Learning' },
  { value: 'cloud-services', label: 'Cloud Services' },
  { value: 'security', label: 'Cybersecurity Solutions' },
  { value: 'consulting', label: 'IT Consulting' },
  { value: 'other', label: 'Other Services' },
] as const;

const formSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  message: z.string().min(10, { message: "Message must be at least 10 characters." }),
  projectType: z.enum(projectTypes.map(pt => pt.value) as [string, ...string[]], {
    required_error: "Please select a project type.",
  }),
});

const quoteFormSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters." }),
  email: z.string().email({ message: "Please enter a valid email address." }),
  company: z.string().min(2, { message: "Company name must be at least 2 characters." }),
  projectType: z.enum(projectTypes.map(pt => pt.value) as [string, ...string[]], {
    required_error: "Please select a project type.",
  }),
  budget: z.enum(["20k-50k", "50k-2L", "2L-5L", "5L-10L"], {
    required_error: "Please select a budget range.",
  }),
  timeline: z.enum(["1-3 months", "3-6 months", "6+ months"], {
    required_error: "Please select a timeline.",
  }),
  description: z.string().min(10, { message: "Please provide more details about your project." }),
});

type FormValues = z.infer<typeof formSchema>;
type QuoteFormValues = z.infer<typeof quoteFormSchema>;

function ContactForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const sectionRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(sectionRef, { once: true, amount: 0.1 });
  const { toast } = useToast();
  const searchParams = useSearchParams();
  const isQuoteRequest = searchParams.get("type") === "quote";

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      message: "",
      projectType: "other",
    },
  });

  const quoteForm = useForm<QuoteFormValues>({
    resolver: zodResolver(quoteFormSchema),
    defaultValues: {
      name: "",
      email: "",
      company: "",
      projectType: "other",
      budget: "20k-50k",
      timeline: "1-3 months",
      description: "",
    },
  });

  // Auto-scroll to form when type=quote is present
  useEffect(() => {
    if (isQuoteRequest && sectionRef.current) {
      sectionRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [isQuoteRequest]);

  const handleSubmit = async (data: FormValues | QuoteFormValues) => {
    setIsSubmitting(true);
    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...data,
          type: isQuoteRequest ? 'quote' : 'contact'
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to send message');
      }
      
      toast({
        title: isQuoteRequest ? "Quote request sent!" : "Message sent successfully!",
        description: "We'll get back to you as soon as possible.",
      });
      
      if (isQuoteRequest) {
        quoteForm.reset();
      } else {
        form.reset();
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "Error sending message",
        description: "Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const contactInfo = [
    {
      icon: Mail,
      label: "Email",
      value: "codematesltd@gmail.com",
      href: "mailto:codematesltd@gmail.com"
    },
    {
      icon: Phone,
      label: "Phone",
      value: "+91 7348975886",
      href: "tel:+917348975886"
    },
    {
      icon: MapPin,
      label: "Location",
      value: "Kalaburagi, Karnataka, India",
      href: "https://www.google.com/maps/place/Kalaburagi,+Karnataka/@17.3298693,76.7661252,12z/data=!3m1!4b1!4m6!3m5!1s0x3bc8c7455c624c43:0xf43fc78f2fc7053d!8m2!3d17.3298693!4d76.7661252!16s%2Fg%2F11c1z8_8_8"
    }
  ];
  const socialLinks = [
    {
      icon: X,
      href: "https://x.com/codematesltd?t=cjXqpZcgoW9BV3Q7TNQUGg&s=09",
      label: "Twitter"
    },
    {
      icon: Facebook,
      href: "https://facebook.com",
      label: "Facebook"
    },
    {
      icon: Instagram,
      href: "https://www.instagram.com/codematesltd/profilecard/?igsh=MTNvb25iYWtiYzZjZA==",
      label: "Instagram"
    },
    {
      icon: Linkedin,
      href: "https://www.linkedin.com/company/codematesltd/",
      label: "LinkedIn"
    }
  ];

  return (
    <div className="container mx-auto px-4 py-24 mt-16">
      <div className="max-w-2xl mx-auto mb-16 text-center">
        <h1 className="text-4xl font-bold mb-4">Get in Touch</h1>
        <p className="text-lg text-muted-foreground">
          Have a project in mind? We'd love to hear from you. Send us a message and we'll respond as soon as possible.
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-12 max-w-5xl mx-auto">
        {/* Contact Form */}
        <Card className="p-6">
          <motion.div
            ref={sectionRef}
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
            {isQuoteRequest ? (
              <>
                <div className="mb-8">
                  <h1 className="text-4xl font-bold tracking-tight">Request a Free Quote</h1>
                  <p className="mt-4 text-lg text-muted-foreground">
                    Fill out the form below and we'll get back to you with a detailed quote for your project.
                  </p>
                </div>
                <Form {...quoteForm}>
                  <form onSubmit={quoteForm.handleSubmit(handleSubmit)} className="space-y-6">
                    <div className="grid gap-6 md:grid-cols-2">
                      <FormField
                        control={quoteForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Name</FormLabel>
                            <FormControl>
                              <Input placeholder="Your name" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={quoteForm.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Email</FormLabel>
                            <FormControl>
                              <Input placeholder="you@example.com" type="email" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={quoteForm.control}
                      name="company"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Company</FormLabel>
                          <FormControl>
                            <Input placeholder="Your company name" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <div className="grid gap-6 md:grid-cols-2">
                      <FormField
                        control={quoteForm.control}
                        name="projectType"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Project Type</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select project type" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {projectTypes.map((type) => (
                                  <SelectItem key={type.value} value={type.value}>
                                    {type.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={quoteForm.control}
                        name="budget"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Budget Range</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select budget range" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="20k-50k">₹20,000 - ₹50,000</SelectItem>
                                <SelectItem value="50k-2L">₹50,000 - ₹2 Lakhs</SelectItem>
                                <SelectItem value="2L-5L">₹2 Lakhs - ₹5 Lakhs</SelectItem>
                                <SelectItem value="5L-10L">₹5 Lakhs - ₹10 Lakhs</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={quoteForm.control}
                      name="timeline"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Expected Timeline</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select timeline" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="1-3 months">1-3 months</SelectItem>
                              <SelectItem value="3-6 months">3-6 months</SelectItem>
                              <SelectItem value="6+ months">6+ months or ongoing</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={quoteForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Project Description</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Please provide details about your project requirements, goals, and any specific features you need."
                              className="h-32"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button type="submit" disabled={isSubmitting} className="w-full">
                      {isSubmitting ? (
                        <>
                          <Send className="mr-2 h-4 w-4 animate-spin" />
                          Sending...
                        </>
                      ) : (
                        <>
                          <Send className="mr-2 h-4 w-4" />
                          Request Quote
                        </>
                      )}
                    </Button>
                  </form>
                </Form>
              </>
            ) : (
              // Regular contact form
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Your name" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input placeholder="Your email" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="projectType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Project Type</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select the type of service you need" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {projectTypes.map((type) => (
                              <SelectItem
                                key={type.value}
                                value={type.value}
                                className="cursor-pointer"
                              >
                                {type.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormDescription>
                          Choose the service that best matches your project needs
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="message"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Message</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Tell us about your project..." 
                            className="min-h-[120px]"
                            {...field} 
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <Button 
                    type="submit" 
                    className="w-full"
                    size="lg"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                          />
                        </svg>
                        Sending...
                      </span>
                    ) : (
                      <span className="flex items-center justify-center">
                        Send Message
                        <Send className="ml-2 h-4 w-4" />
                      </span>
                    )}
                  </Button>
                </form>
              </Form>
            )}
            </motion.div>
          </motion.div>
        </Card>

        {/* Contact Info & Map */}
        <div className="space-y-8">
          {/* Contact Info */}
          <div className="grid gap-4">
            {contactInfo.map((info, index) => (
              <Card key={index} className="p-4">
                <div className="flex items-center gap-4">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <info.icon className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <h3 className="font-medium mb-1">{info.label}</h3>
                    <a
                      href={info.href}
                      className="text-muted-foreground hover:text-primary transition-colors"
                    >
                      {info.value}
                    </a>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {/* Google Maps */}
          <Card className="overflow-hidden">
            <iframe
              title="Codemates LTD Location"
              src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d121659.95755604982!2d76.76612520761267!3d17.329869311037275!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3bc8c7455c624c43%3A0xf43fc78f2fc7053d!2sKalaburagi%2C%20Karnataka!5e0!3m2!1sen!2sin!4v1710340477115!5m2!1sen!2sin"
              width="100%"
              height="400"
              style={{ border: 0 }}
              allowFullScreen
              loading="lazy"
              referrerPolicy="no-referrer-when-downgrade"
            />
          </Card>
          
          {/* Social Media Links */}
          <div className="flex justify-center gap-4">
            {socialLinks.map((link, index) => (
              <Link
                key={index}
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                className="p-2 rounded-full bg-primary/10 hover:bg-primary/20 transition-colors"
              >
                <link.icon className="h-5 w-5 text-primary" />
              </Link>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

// Import the ContactForm component dynamically to avoid SSR
const ContactForm = dynamic(
  () => import("@/components/contact-form"),
  {
    loading: () => (
      <div className="animate-pulse flex flex-col space-y-4">
        <div className="h-12 bg-muted rounded-md" />
        <div className="h-12 bg-muted rounded-md" />
        <div className="h-32 bg-muted rounded-md" />
      </div>
    ),
    ssr: false
  }
);

// Social media links
const socialLinks = [
  { href: "https://www.linkedin.com/company/codematesltd/", icon: Linkedin, label: "LinkedIn" },
  { href: "https://x.com/codematesltd?t=cjXqpZcgoW9BV3Q7TNQUGg&s=09", icon: X, label: "Twitter" },
  { href: "https://www.instagram.com/codematesltd/", icon: Instagram, label: "Instagram" },
  { href: "https://www.facebook.com/codematesltd", icon: Facebook, label: "Facebook" },
];

// Contact information
const contactInfo = [
  {
    icon: MapPin,
    label: "Kalaburagi, Karnataka, India",
  },
  {
    icon: Mail,
    label: "codematesltd@gmail.com",
    href: "mailto:codematesltd@gmail.com",
  },
  {
    icon: Phone,
    label: "+91 73489 75886",
    href: "tel:+917348975886",
  },
];

export default function ContactPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <ContactForm />
    </Suspense>
  );
}
